// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	orders "shiva/shiva-auth/internal/orders"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: userValue, productId
func (_m *Usecase) Checkout(userValue string, productId uint) (orders.Domain, error) {
	ret := _m.Called(userValue, productId)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(string, uint) orders.Domain); ok {
		r0 = rf(userValue, productId)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(userValue, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVA provides a mock function with given fields: productId, userId, bankCode, userValue
func (_m *Usecase) CreateVA(productId uint, userId uint, bankCode string, userValue string) (orders.Domain, error) {
	ret := _m.Called(productId, userId, bankCode, userValue)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(uint, uint, string, string) orders.Domain); ok {
		r0 = rf(productId, userId, bankCode, userValue)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, string, string) error); ok {
		r1 = rf(productId, userId, bankCode, userValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: userId
func (_m *Usecase) GetHistory(userId uint) ([]orders.Domain, error) {
	ret := _m.Called(userId)

	var r0 []orders.Domain
	if rf, ok := ret.Get(0).(func(uint) []orders.Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentChannels provides a mock function with given fields:
func (_m *Usecase) PaymentChannels() ([]orders.Domain, error) {
	ret := _m.Called()

	var r0 []orders.Domain
	if rf, ok := ret.Get(0).(func() []orders.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookPaidVA provides a mock function with given fields: externalId, amount
func (_m *Usecase) WebhookPaidVA(externalId uint, amount int) (string, error) {
	ret := _m.Called(externalId, amount)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, int) string); ok {
		r0 = rf(externalId, amount)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(externalId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
