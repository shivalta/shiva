// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	orders "shiva/shiva-auth/internal/orders"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: domain
func (_m *Repository) CreateTransaction(domain orders.Domain) (orders.Domain, error) {
	ret := _m.Called(domain)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(orders.Domain) orders.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orders.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Repository) GetById(id uint) (orders.Domain, error) {
	ret := _m.Called(id)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(uint) orders.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: userId
func (_m *Repository) GetHistory(userId uint) ([]orders.Domain, error) {
	ret := _m.Called(userId)

	var r0 []orders.Domain
	if rf, ok := ret.Get(0).(func(uint) []orders.Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAfterCreateVA provides a mock function with given fields: domain
func (_m *Repository) UpdateAfterCreateVA(domain orders.Domain) (orders.Domain, error) {
	ret := _m.Called(domain)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(orders.Domain) orders.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orders.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUniqueValue provides a mock function with given fields: transactionId, uniqueValue
func (_m *Repository) UpdateUniqueValue(transactionId uint, uniqueValue string) error {
	ret := _m.Called(transactionId, uniqueValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(transactionId, uniqueValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookPaidVA provides a mock function with given fields: externalId, status
func (_m *Repository) WebhookPaidVA(externalId uint, status string) (orders.Domain, error) {
	ret := _m.Called(externalId, status)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(uint, string) orders.Domain); ok {
		r0 = rf(externalId, status)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(externalId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
